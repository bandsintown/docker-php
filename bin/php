#!/usr/bin/env bash
set +x
set -e

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
root_dir="$( cd "$BIN_DIR/.." && pwd )"

docker_compose_tests=(test-image test-consul-template)

help() {
    cat <<- EOHELP
Usage: $(basename $0) COMMAND OPTIONS
Example: $(basename $0) tests --version 3.19.1 --build

A thin wrapper around docker compose to manage the '$image_name' image

COMMANDS:

help        This help message.
tests       Run tests for the selected version image.
build       Build an image for the selected version.

OPTIONS:

--version   Required. The version of the image to build or test.
--build     Build the image before running the tests. Used with the 'tests' command.
--variant   The variant of the image to build or test. Used with the 'build' command.
EOHELP
}

function parse_opts() {
    while [ $# -gt 0 ]; do
        local option="$1"

        case $option in
            --build)
                run_build_opt="true"
                ;;
            --version)
                VERSION="$2"
                [[ $VERSION =~ ^[0-9]+\.[0-9]+(\.[0-9]+)*-fpm$ ]] || { echo "Invalid version format"; exit 1; }
                export VERSION
                ;;
            --variant)
                variant="$2"
                [[ $variant =~ (test) ]] || { echo "==> Invalid variant"; exit 1; }
                ;;
            --verbose)
                verbose="true"
                ;;
        esac

        shift
    done
}


function run_build() {
    # Build image
    test -n "${VERSION}" || { echo "Specify the version you want to build"; exit 1; }
    echo "==> Building image for ${VERSION} ..."
    run_command="docker build -f versions/${VERSION}/Dockerfile -t bandsintown/php:${VERSION} ."

    ${run_command}

    if [[ -n "${variant}" ]]; then
        # Build image variant
        echo "==> Building image ${VERSION}-${variant}..."
        run_command="docker build -f versions/${VERSION}/${variant}/Dockerfile -t bandsintown/php:${VERSION}-${variant} ."

        ${run_command}
    fi
}


function run_tests() {
    test -n "${VERSION}" || { error "Specify the version you want to test"; exit 1; }
    test -n "${run_build_opt}" && variant="test" && run_build
    echo "==> Running tests for ${VERSION} ..."

    for dc_test in "${docker_compose_tests[@]}"; do
        echo "==> Running test ${dc_test} for ${VERSION} ..."
        run_command="docker compose run --rm ${dc_test}"
        ${run_command}
    done
}


trap cleanup_containers EXIT

function cleanup_containers() {
    docker compose down
    exit
}

# Check command
command="$1"

cd "$root_dir"

# Parse options
parse_opts "$@"

# Run the command
case "${command}" in
    help|-h|--help)
        help
        ;;
    tests)
        shift
        run_tests "$@"
        ;;
    build)
        shift
        run_build "$@"
        ;;
    *)
        echo "Invalid command"
        help
        ;;
esac
